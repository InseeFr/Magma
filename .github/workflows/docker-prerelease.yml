name: Build release candidate

on:
  release:
    types: [prereleased]
    branches:
      - main
    paths-ignore:
      - documentation/**

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      release-version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: echo "version=$(mvn -f pom.xml help:evaluate -Dexpression=project.version -q -DforceStdout)-SNAPSHOT" >> $GITHUB_OUTPUT

      - name: Print version
        run: echo ${{ steps.version.outputs.version }}

      - uses: mukunku/tag-exists-action@v1.6.0
        name: Check tag existence
        id: check-tag-exists
        with:
          tag: ${{ steps.version.outputs.version }}

      - name: Tag verification
        id: check-tag
        run: |
          if [[ "${{ steps.check-tag-exists.outputs.exists }}" == "true" ]]; then
            echo "Nothing to tag/release, the tag ${{ steps.version.outputs.version }} already exists"
            exit 1
          fi
  build-release:
    runs-on: ubuntu-latest
    steps:
      - name: Extract branch name
        shell: bash
        run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >>$GITHUB_OUTPUT
        id: extract_branch

      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.extract_branch.outputs.branch }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "21"

      - name: Build API
        run: mvn package -Dchangelist=-SNAPSHOT --no-transfer-progress

      - name: Upload API jar
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

      - name: Run Sonar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Pcoverage   


  docker:
    runs-on: ubuntu-latest
    needs:
      - check-version
      - build-release
    steps:
        - uses: actions/checkout@v4
        - name: Set up QEMU
          uses: docker/setup-qemu-action@v3
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
        - name: Login to GitHub Container Registry
          uses: docker/login-action@v3
          with:
              registry: ghcr.io
              username: ${{ github.repository_owner }}
              password: ${{ secrets.GITHUB_TOKEN }}
        - name: Extract version
          run: echo "VERSION=$(cat package.json | jq -r .version)" >> $GITHUB_ENV
        - name: Build and push
          uses: docker/build-push-action@v6
          with:
              push: true
              file: Dockerfile
              tags: "latest, ${{ needs.check-version.outputs.release-version }}"
